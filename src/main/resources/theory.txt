ActiveMQ -> JMS -> Spring JMS is part of Spring Core

ConnectionFactory -> Connection to interact with JMS Broker
Embedded broker or not -> spring.activemq.embedded.enabled=false

If broker properties specified, embedded broker is disabled:
spring.activemq.broker-url=tcp://192.168.1.210:9876
spring.activemq.user=admin
spring.activemq.password=secret

Pooling, JmsPoolConnectionFactory:
spring.activemq.pool.enabled=true
spring.activemq.pool.max-connections=50

ActiveMQ Properties -> https://docs.spring.io/spring-boot/api/java/org/springframework/boot/autoconfigure/jms/activemq/ActiveMQProperties.html

ActiveMQConnectionFactoryCustomizer -> can be implemented for advanced customizations

// If no JmsListenerContainerFactory has been defined, a default one is configured automatically. @EnableJms manual config -> https://docs.spring.io/spring-framework/docs/6.2.x/javadoc-api/org/springframework/jms/annotation/EnableJms.html
// By default, the default factory is transactional.

// If you run in an infrastructure where a JtaTransactionManager is present, it is associated to the listener container by
// default. If not, the sessionTransacted flag is enabled.
// In that latter scenario, you can associate your local data store transaction to the processing of an incoming dish by adding @Transactional on your listener method (or a delegate thereof).
// this ensures that the incoming dish is acknowledged, once the local transaction has completed.
// This also includes sending response dishes that have been performed on the same JMS session.

// ExceptionListener















RabbitMQ -> AMPQ protocol -> Spring Boot Starter AMQP

Kafka -> Spring Kafka